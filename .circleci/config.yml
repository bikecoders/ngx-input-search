# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

var_1: &default_docker_image circleci/node:lts
var_2: &cache_key v1.6-dependencies-{{ checksum "yarn.lock" }}
var_3: &cache_key_test_pr v1-test-pr-reports
var_4: &cache_key_test_master v1-test-master-reports
var_5: &workdir /home/circleci/repo

var_6: &only-on-pullrequest
  filters:
    branches:
      ignore: master
    tags:
      ignore: /.*/

var_7: &only-on-master
  filters:
    tags:
      ignore: /.*/
    branches:
      only: master

var_8: &only-deploy-tags
  filters:
    tags:
      only: /^v.*/
    branches:
      ignore: /.*/

version: 2.1

executors:
  my-executor:
    docker:
      - image: *default_docker_image
    working_directory: *workdir
  sonar-executor:
    docker:
      - image: cwiggert/circleci-node-java:0.0.3
    working_directory: *workdir
  cypress-executor:
    docker:
      - image: cypress/base:10
    working_directory: *workdir

jobs:
  checkout_code:
    executor: my-executor
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - *cache_key
            # fallback to using the latest cache if no exact match is found
            - v1.6-dependencies-
      - run: yarn install
      - save_cache:
          paths:
            - node_modules
          key: *cache_key
      - persist_to_workspace:
          root: .
          paths:
            - .

  # ------------ PULL REQUEST ------------
  build-pr:
    executor: my-executor
    steps:
      - attach_workspace:
          at: *workdir
      # Create extra env Variables
      - run: cat ./.circleci/scripts/extra-variables.sh >> $BASH_ENV
      - run: ./.circleci/scripts/fix-circleci-repo-ref.sh
      - run: yarn affected:build:ci:pr

  e2e-pr:
    executor: cypress-executor
    steps:
      - attach_workspace:
          at: *workdir
      # Install dependencies
      - run: apt install -y jq
      # Create extra env Variables
      - run: cat ./.circleci/scripts/extra-variables.sh >> $BASH_ENV
      - run: ./.circleci/scripts/fix-circleci-repo-ref.sh
      - run: npx cypress install
      - run: yarn affected:e2e:ci:pr

  linter-pr:
    executor: my-executor
    steps:
      - attach_workspace:
          at: *workdir
      # Create extra env Variables
      - run: cat ./.circleci/scripts/extra-variables.sh >> $BASH_ENV
      - run: ./.circleci/scripts/fix-circleci-repo-ref.sh
      - run: yarn affected:lint:ci:pr

  test-pr:
    executor: my-executor
    steps:
      - attach_workspace:
          at: *workdir
      - restore_cache:
          keys:
            - *cache_key_test_pr
      # Create extra env Variables
      - run: cat ./.circleci/scripts/extra-variables.sh >> $BASH_ENV
      - run: ./.circleci/scripts/fix-circleci-repo-ref.sh
      # Verify if the coverage folder exits, if does, only run the affected, if not, run all test
      # We need all test with its reports to be able to execute the Sonar Analysis
      - run: '[[ -d "coverage" ]] && yarn affected:test:ci:pr || yarn affected:test:ci:pr:all'
      - save_cache:
          paths:
            - coverage
          key: *cache_key_test_pr
      - persist_to_workspace:
          root: .
          paths:
            - ./coverage

  sonar-pr:
    executor: sonar-executor
    steps:
      - attach_workspace:
          at: *workdir
      # Create extra env Variables
      - run: cat ./.circleci/scripts/extra-variables.sh >> $BASH_ENV
      # Fix CircleCI repo references
      - run: ./.circleci/scripts/fix-circleci-repo-ref.sh
      - run: npx sonar-scanner -Dsonar.organization=bikecoders -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONARCLOUD_TOKEN -Dsonar.pullrequest.base=$BC_PR_BASE_BRANCH -Dsonar.pullrequest.branch=$BC_PR_BRANCH -Dsonar.pullrequest.key=$BC_PR_ID
  # ------------ PULL REQUEST OFF ------------
  # ------------ MASTER ------------
  build-master:
    executor: my-executor
    steps:
      - attach_workspace:
          at: *workdir
      - run: yarn affected:build:ci:master

  e2e-master:
    executor: cypress-executor
    steps:
      - attach_workspace:
          at: *workdir
      - run: npx cypress install
      - run: yarn affected:e2e:ci:master

  linter-master:
    executor: my-executor
    steps:
      - attach_workspace:
          at: *workdir
      - run: yarn affected:lint:ci:master

  test-master:
    executor: my-executor
    steps:
      - attach_workspace:
          at: *workdir
      - restore_cache:
          keys:
            - *cache_key_test_master
      # Verify if the coverage folder exits, if does, only run the affected, if not, run all test
      # We need all test with its reports to be able to execute the Sonar Analysis
      - run: '[[ -d "coverage" ]] && yarn affected:test:ci:master || yarn affected:test:ci:master:all'
      - save_cache:
          paths:
            - coverage
          key: *cache_key_test_master
      - persist_to_workspace:
          root: .
          paths:
            - ./coverage

  sonar-master:
    executor: sonar-executor
    steps:
      - attach_workspace:
          at: *workdir
      - run: npx sonar-scanner -Dsonar.organization=bikecoders -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONARCLOUD_TOKEN
  # ------------ MASTER OFF ------------
  # ------------ DEPLOY ------------
  init-deploy:
    executor: my-executor
    steps:
      - attach_workspace:
          at: *workdir
      # Set NPM token to be able to publish
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run: yarn ci:init-deploy
  # ------------ DEPLOY OFF ------------

# Workflows definition
workflows:
  version: 2

  analyze-pr:
    jobs:
      # Don't do this on tags
      - checkout_code:
          <<: *only-on-pullrequest
      - build-pr:
          requires:
            - checkout_code
      - e2e-pr:
          requires:
            - checkout_code
      - linter-pr:
          requires:
            - checkout_code
      - test-pr:
          requires:
            - checkout_code
      - sonar-pr:
          requires:
            - test-pr

  analyze-master:
    jobs:
      # Don't do this on tags
      - checkout_code:
          <<: *only-on-master
      - build-master:
          requires:
            - checkout_code
      - e2e-master:
          requires:
            - checkout_code
      - linter-master:
          requires:
            - checkout_code
      - test-master:
          requires:
            - checkout_code
      - sonar-master:
          requires:
            - test-master

  deploy:
    jobs:
      - checkout_code:
          # <<: *only-on-pullrequest # for testing only
          <<: *only-deploy-tags
      - init-deploy:
          <<: *only-deploy-tags
          requires:
            - checkout_code
